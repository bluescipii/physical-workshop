(this["webpackJsonpreact-app"]=this["webpackJsonpreact-app"]||[]).push([[0],{107:function(e,t,n){},108:function(e,t,n){},195:function(e,t,n){"use strict";n.r(t);var a=n(0),o=n.n(a),s=n(69),r=n.n(s),i=(n(36),n(12)),c=n(1),l=(n(77),n(2)),h=window.$,d=function e(t,n,a,o,s){var r=this;Object(l.a)(this,e),this.changeFont=function(){h("body").css("font-family",r.valuename),h("#description").html(r.desc),h("#link").html(r.link),h("button").css("font-family",r.valuename),h("#link").attr("href",r.link),h(".ascii-element").css("font-family",r.valuename),h(".textarea").css("font-family",r.valuename),h(".preview").css("font-family",r.valuename),document.getElementById("rightfooter").innerHTML="body.fontfamily="+r.valuename,setTimeout((function(){r.changeStyle()}),100)},this.changeStyle=function(){document.getElementById("arraymain").style.width=window.innerWidth-h("#fontarraybuttonright").width()-h("#fontarraybuttonright").width()+"px",document.getElementById("arraymain").style.marginLeft=h("#fontarraybuttonleft").width()+"px",document.getElementById("description").style.height=window.innerHeight-h("#arraycarrier").height()-h("#footer").height()-100+"px",document.getElementById("descontainer").style.height=window.innerHeight-h("#arraycarrier").height()-h("#footer").height()-100+"px",document.getElementById("leftreadme").style.marginTop=h("#readmebutton").height()+"px",document.getElementById("leftreadme").style.height=.9*window.innerHeight-h("#readmebutton").height()+"px",document.getElementById("rightreadme").style.height=window.innerHeight-h("#readmeArrow").height()-.05*window.innerHeight+"px",document.getElementById("typewhitebackground").style.width=h("#typefontbutton").width()+"px",document.getElementsByClassName("CodeMirror cm-s-custom-0")[0].style.width=window.innerWidth-h("#typefontbutton").width()+"px"},this.name=n,this.valuename=a,this.desc=s,this.link=o,this.click=t},m=new d(!1,"Fria Code","Fira Code","https://fonts.google.com/specimen/Fira+Code?selection.family=Fira+Code","Programmers use a lot of symbols, often encoded with several characters. For the human brain, sequences like ->, <= or := are single logical tokens, even if they take two or three characters on the screen. Your eye spends a non-zero amount of energy to scan, parse and join multiple characters into a single logical one. Ideally, all programming languages should be designed with full-fledged Unicode symbols for operators, but that\u2019s not the case yet.\n\nFira Code is an extension of the Fira Mono font containing a set of ligatures for common programming multi-character combinations. This is just a font rendering feature: underlying code remains ASCII-compatible. This helps to read and understand code faster. For some frequent sequences like .. or //, ligatures allow us to correct spacing."),u=new d(!1,"Cousine","Cousine","https://fonts.google.com/specimen/Cousine?selection.family=Cousine","Cousine was designed by Steve Matteson as an innovative, refreshing sans serif design that is metrically compatible with Courier New\u2122. Cousine offers improved on-screen readability characteristics and the pan-European WGL character set and solves the needs of developers looking for width-compatible fonts to address document portability across platforms. Updated in May 2013 with improved hinting and released under the Apache 2.0 license."),p=new d(!1,"DejaVu Sans Mono","DejaVuSansMono","https://dejavu-fonts.github.io/","The DejaVu fonts are a font family based on the Vera Fonts. Its purpose is to provide a wider range of characters while maintaining the original look and feel through the process of collaborative development, under a Free license."),f=new d(!1,"Inconsolata-g","Inconsolata","https://leonardo-m.livejournal.com/77079.html","I use the free Inconsolata font (by Raph Levien) to program and as shell font, and I like it a lot. I have seen this blog post: \"Adding straight single and double quotes to Inconsolata\", that offers Inconsolata-dz:http://nodnod.net/2009/feb/12/adding-straight-single-and-double-quotes-inconsola/So I've uses FontForge to modify more his Inconsolata version, to fix some of the things I don't like of Inconsolata. This is the result, my Inconsolata-g. \n My changes: - Single and double quotes ' and \" are now straight, this comes from Inconsolata-dz. - , . ' are a bit more visible/thick, because such symbols are really important in C-like languages, and you need to see them well. (Now the comma of , is a bit bigger than the comma of ; but I don't care of such useless symmetries, I use this font for practical purposes)....(check more in his website)"),g=new d(!1,"SourceCodePro","SourceCodePro","https://github.com/adobe-fonts/source-code-pro","SourceCodePro is a set of OpenType fonts that have been designed to work well in user interface (UI) environments."),b=new d(!1,"Ubuntu Mono","Ubuntu Mono","https://fonts.google.com/specimen/Ubuntu+Mono?selection.family=Ubuntu+Mono","The Ubuntu Font Family are a set of matching new libre/open fonts in development during 2010-2011. The development is being funded by Canonical Ltd on behalf the wider Free Software community and the Ubuntu project. The technical font design work and implementation is being undertaken by Dalton Maag. Both the final font Truetype/OpenType files and the design files used to produce the font family are distributed under an open licence and you are expressly encouraged to experiment, modify, share and improve. The new Ubuntu Font Family was started to enable the personality of Ubuntu to be seen and felt in every menu, button and dialog. The typeface is sans-serif, uses OpenType features and is manually hinted for clarity on desktop and mobile computing screens. The scope of the Ubuntu Font Family includes all the languages used by the various Ubuntu users around the world in tune with Ubuntu's philosophy which states that every user should be able to use their software in the language of their choice. So the Ubuntu Font Family project will be extended to cover many more written languages. Ubuntu and Canonical are registered trademarks of Canonical Ltd."),y=new d(!1,"Hack Regular","Hack Regular","https://github.com/source-foundry/Hack",'The work in the Hack project is Copyright 2018 Source Foundry Authors and licensed under the MIT License The work in the DejaVu project was committed to the public domain. Bitstream Vera Sans Mono Copyright 2003 Bitstream Inc. and licensed under the Bitstream Vera License with Reserved Font Names "Bitstream" and "Vera"'),w=new d(!1,"IBM Plex Mono","IBM Plex Mono","https://fonts.google.com/specimen/IBM+Plex+Mono","IBM Plex\u2122 is an international typeface family designed by Mike Abbink, IBM BX&D, in collaboration with Bold Monday, an independent Dutch type foundry. Plex was designed to capture IBM\u2019s spirit and history, and to illustrate the unique relationship between mankind and machine\u2014a principal theme for IBM since the turn of the century. The result is a neutral, yet friendly Grotesque style typeface that includes a Sans, Sans Condensed, Mono, and Serif and has excellent legibility in print, web and mobile interfaces. Plex\u2019s three designs work well independently, and even better together. Use the Sans as a contemporary compadre, the Serif for editorial storytelling, or the Mono to show code snippets. The unexpectedly expressive nature of the italics give you even more options for your designs."),v=new d(!1,"iosevka medium","iosevka medium","https://typeof.net/Iosevka/","Iosevka is a slender monospace sans-serif and slab-serif typeface inspired by Pragmata Pro, M+ and PF DIN Mono, designed to be the ideal font for programming."),k=new d(!1,"MesloLGM-Regular","MesloLGMregular","https://github.com/andreberg/Meslo-Font","Meslo LG is a customized version of Apple\u2019s Menlo-Regular font(which is a customized Bitstream Vera Sans Mono). In Snow Leopard, Menlo-Regular is now the preferred and default font for Apple\u2019s developer tools and also the Terminal (unless you changed the font settings for these apps yourself before upgrading to SL \u2013 your changes will stay in place)"),I=new d(!1,"PT Mono","PT Mono","https://fonts.google.com/specimen/PT+Mono?selection.family=PT+Mono","PT Mono was developed for specific uses in forms, tables, worksheets and other contexts. Equal character widths are very helpful in setting complex documents, as with such a font you may easily calculate size of entry fields, column widths in tables and so on. One of the most important areas of use is in governmental web sites where visitors have to fill different forms. Currently PT Mono consists of just one Regular style. PT Mono was designed by Alexandra Korolkova with participation of Isabella Chaeva and with the financial support of Google Web Fonts."),x=new d(!1,"M+ 1M","mplus-1m-medium","http://mplus-fonts.osdn.jp/about-en.html","The M PLUS Outline Fonts Project develops a superfamily set of several families: 4 families with proportional Latin, 3 with fixed-halfwidth Latin, and 2 with fixed-fullwidth Japanese Kana variations. This set, M PLUS 1p, are fonts with proportional Latin and fixed-fullwidth Japanese, and 7 weights from Thin to Black. The Kana have contrasting straight lines and hand-drawn curves. The Latin is aimed to be a sophisticated and relaxed design."),C=new d(!1,"Roboto Mono","Roboto Mono","https://fonts.google.com/specimen/Roboto+Mono?selection.family=Roboto+Mono","Roboto Mono is a monospaced addition to the Roboto type family. Like the other members of the Roboto family, the fonts are optimized for readability on screens across a wide variety of devices and reading environments. While the monospaced version is related to its variable width cousin, it doesn\u2019t hesitate to change forms to better fit the constraints of a monospaced environment. For example, narrow glyphs like \u2018I\u2019, \u2018l\u2019 and \u2018i\u2019 have added serifs for more even texture while wider glyphs are adjusted for weight. Curved caps like \u2018C\u2019 and \u2018O\u2019 take on the straighter sides from Roboto Condensed. Special consideration is given to glyphs important for reading and writing software source code. Letters with similar shapes are easy to tell apart. Digit \u20181\u2019, lowercase \u2018l\u2019 and capital \u2018I\u2019 are easily differentiated as are zero and the letter \u2018O\u2019. Punctuation important for code has also been considered. For example, the curly braces \u2018{ }\u2019 have exaggerated points to clearly differentiate them from parenthesis \u2018( )\u2019 and braces \u2018[ ]\u2019. Periods and commas are also exaggerated to identify them more quickly. The scale and weight of symbols commonly used as operators have also been optimized. To contribute, see github.com/google/roboto"),E=new d(!1,"Monoid Regular","Monoid Regular","https://larsenwork.com/monoid/","Monoid is customizable and optimized for coding with bitmap-like sharpness at 12px/9pt even on low res displays.Semi-condensed and distinguishable glyphs with short ascenders + descenders, big apertures and supersized operators + punctuation."),T=new d(!1,"Code New Roman","Code New Roman","https://www.fontspace.com/typostyle/code-new-roman","Code New Roman is aimed for use in programming environments and other circumstances where a monospaced font is specified. All characters have the same width, like old typewriters, making it a good choice for programmers. This font improved and target to Mac OS Western New Roman, MONACO, Windows Consolas/Lusida Consolas, ABeeZee and Bitstream Vera Sans Mono.This font display allowed a design with proportions closer to normal text than traditional monospaced fonts like Courier. This allows for more comfortably reading of extended text on screen. OpenType features include hanging or lining numerals; slashed, dotted and normal zeros; and alternative shapes for a number of lower-case letters. The look of text can be tuned to personal taste by varying the number of bars and waves.download latest version of CNR 2.1, It will resolve all problem in old versions of CNR. And Our recommendation is use more than 7px font size, thanks for being with us CNR v2.1 Stable bold/italic/bold italic coming soon Feel free, don't miss out your comment, It worth than donation"),j=new d(!1,"Proggy Clean","ProggyClean","https://proggyfonts.net/","The proggy fonts are a set of fixed-width screen fonts that are designed for code listings. They are distributed in Microsoft\u2019s .fon format, the truetype (ttf) format, as well as XWindows (Linux/BSD\u2026) pcf format. The .fon format works well with MS Visual Studio, a command prompt, Photoshop, etc. Some editors do not recognize .fon fonts, in which case you should use the ttf version (12pt PC, 16pt Mac). Each font only comes in one size that it looks good at. The ttf fonts should also be used at their intended point size as they are basically conversions of the pixel based bitmap versions. The fonts were optimized while coding in C or C++\u2026 for this reason, characters like the \u2018*\u2019 were placed vertically centered, as \u2018*\u2019 usually means dereference or multiply, but never \u2018to the power of\u2019 like in Fortran. The {}s are centered horizontally (as my coding style aligns braces vertically), the zero looks different from the capital oh, and there is never any confusion between ells, ones, and eyes. Additionally, the arithmetic operators (+ \u2013 * < >) are all axis aligned\u2026 unlike the last ones you just saw. Screenshots and individual font information is available in the download area."),M=new d(!1,"VictorMono Regular","VictorMonoRegular","https://rubjo.github.io/victor-mono/","Victor Mono is a free programming font with semi-connected cursive italics, symbol ligatures (!=, ->>, =>, ===, <=, >= ++) and Latin, Cyrillic and Greek characters. It was drawn from scratch as a pet project / experiment because there just wasn't any free or paid font that I found both readable, effective and elegant. The typeface is clean, crisp and narrow, with a large x-height and clear punctuation, making it legible and ideal for code. It comes in seven weights, and is available in Roman, Italic and Oblique styles."),N=new d(!1,"Hermit Regular","Hermit Regular","https://pcaro.es/p/hermit/","Hermit is a monospace font designed to be clear, pragmatic and very readable. Its creation has been focused on programming. Every glyph was carefully planned and calculated, according to defined principles and rules. For this reason, Hermit is coherent and regular. Symbols stand out from common text. Dots and commas are easily seen, and operators are clear even when not surrounded by spaces. Similar characters have been designed to be very distinguishable from each other."),S=new d(!1,"VGA","VGA","https://www.cufonfonts.com/font/perfect-dos-vga-437","The PS/2 standards further modified the system font with a character cell 16 pixels tall, a squarer capital 'O' vs. a rounded zero (now dotted rather than slashed), and so on. The 8x16 version is used in MCGA text mode.  VGA keeps that one, but it also has its own 9x16 version, which once again has wider forms for specific characters and generates the 9th column MDA-like.  The 9x16 font is the VGA default, and that's the one most widely associated with ASCII/ANSI art on the PC... and probably with the entire DOS era in general."),O=new d(!1,"Not Courier Sans","NotCourierSans","http://osp.kitchen/foundry/notcouriersans/","NotCourierSans is a re-interpretation of Nimbus Mono whose design began in Wroclaw at the occasion of the Libre Graphics Meeting 2008."),F=new d(!1,"Nouveau IBM","Nouveau_IBM","https://www.dafont.com/nouveau-ibm.font","TTF and Unicode version of the IBM PC font. Good for terminal programs. Size 12 represents the original."),A=new d(!1,"Share Tech Mono","Share Tech Mono","https://fonts.google.com/specimen/Share+Tech+Mono","Share Tech Mono is a monospaced sans serif, based on the Share family. There is also Share Tech, a proportionally spaced version."),D=new d(!1,"Nanum Gothic Coding","Nanum Gothic Coding","https://fonts.google.com/specimen/Nanum+Gothic+Coding","Nanum Gothic Coding is a contemporary monospaced sans-serif typeface with a warm touch, and it is expertly hinted for screen use. It is part of the Nanum fonts (\ub098\ub214\uae00\uaf34) \u2013 a set of high quality Unicode fonts designed especially for the Korean-language script \u201cHangeul\u201d that also support Latin. Designed by Sandoll Communications (\uc0b0\ub3cc \ucee4\ubba4\ub2c8\ucf00\uc774\uc158) and Fontrix (\ud3f0\ud2b8\ub9ad\uc2a4,) and published by Naver (\ub124\uc774\ubc84.)"),B=new d(!1,"Anonymous Pro","Anonymous Pro","https://fonts.google.com/specimen/Anonymous+Pro?selection.family=Anonymous+Pro","Anonymous Pro is a family of four fixed-width fonts designed especially with coding in mind. It is inspired by Anonymous 9, a freeware Macintosh bitmap font developed in the mid-'90s by Susan Lesch and David Lamkins, that was intended as a more legible alternative to Monaco, the fixed-width Macintosh system font. Characters that could be mistaken for one another (O, 0, I, l, 1, etc.) have distinct shapes to make them easier to tell apart in the context of source code. The regular and bold styles have embedded bitmaps for the smallest sizes (10-13 ppem.)"),P=new d(!1,"consola","consola","https://docs.microsoft.com/en-us/typography/font-list/consolas","Consolas is aimed for use in programming environments and other circumstances where a monospaced font is specified. All characters have the same width, like old typewriters, making it a good choice for personal and business correspondance. The improved Windows font display allowed a design with proportions closer to normal text than traditional monospaced fonts like Courier. This allows for more comfortably reading of extended text on screen. OpenType features include hanging or lining numerals; slashed, dotted and normal zeros; and alternative shapes for a number of lowercase letters. The look of text can be tuned to personal taste by varying the number of bars and waves."),z=new d(!1,"D2Coding","D2Coding","https://github.com/naver/d2codingfont","D2 Coding \uae00\uaf34\uc740 \ub098\ub214\ubc14\ub978\uace0\ub515\uc744 \ubc14\ud0d5\uc73c\ub85c \uac1c\ubc1c\uc790\uc758 \ucf54\ub529\uc744 \uc704\ud574 \uac00\ub3c5\uc131 \ubc0f \uc720\uc0ac \ubb38\uc790\uac04 \ubcc0\ubcc4\ub825 \ubfd0\ub9cc \uc544\ub2c8\ub77c \ub514\uc790\uc778\uc801\uc73c\ub85c \ud55c\uae00\uacfc\uc758 \uc870\ud654\ub97c \uace0\ub824\ud574 \ucd5c\uc801\ud654\uc2dc\ud0a8 \uae00\uaf34\uc785\ub2c8\ub2e4. D2 Coding \uae00\uaf34\uc740 \ucf54\ub529\uc2dc \uc720\uc0ac\ud55c \ud615\ud0dc\uc758 \uc601\ubb38/\uc22b\uc790 \ubfd0\ub9cc \uc544\ub2c8\ub77c \ud55c\uae00/\ud2b9\uc218\ubb38\uc790 \ub4f1\uc5d0 \ub300\ud55c \ubcc0\ubcc4\ub825\uacfc \uac00\ub3c5\uc131\uc744 \uac15\ud654\ud558\uc600\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uace0\uc815\ud3ed \uae00\uaf34\ub85c \uc81c\uc791\uc774 \ub418\uc5b4 \uc5b4\ub5a4 \uac1c\ubc1c\ud658\uacbd\uc5d0\uc11c\ub3c4 \uc790\uac04\uacfc \ud589\uac04\uc744 \uc720\uc9c0\ud558\ub3c4\ub85d \ub514\uc790\uc778\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4."),L=new d(!1,"Apl2741","Apl2741","http://apl385.com/fonts/index.html","Historic interest only. This was hand digitised as a PostScript Type-3 font from an original 2741 golf-ball salvaged from an IBM selectric typewriter. Looks good on paper, but poor on screen as it is lightweight and italic. The hinting is rudimentary and even with ClearType it is hard to read!"),R=new d(!1,"Cutive Mono","Cutive Mono","https://fonts.google.com/specimen/Cutive+Mono?selection.family=Cutive+Mono","The design of Cutive, and this monospace sister family Cutive Mono, is based on a number of classic typewriter typefaces, in particular the faces of IBM's 'Executive,' and the older 'Smith-Premier.' In Cutive these old faces re-emerge as webfonts that are useful for adding character to body texts as well as in larger sizes for headers and display.");var V=function(e){e.style;return o.a.createElement(c.a.div,{className:"nav-wrapper"},o.a.createElement("div",{id:"arraymain"},o.a.createElement("div",{id:"arraycarrier"},o.a.createElement("div",{class:"arraytitle"},"new fontArray=["),o.a.createElement("button",{className:"fontarray",onClick:B.changeFont},B.name),",",o.a.createElement("button",{className:"fontarray",onClick:L.changeFont},L.name),",",o.a.createElement("button",{className:"fontarray",onClick:T.changeFont},T.name),",",o.a.createElement("button",{className:"fontarray",style:{backgroundColor:"red"},onClick:u.changeFont},u.name),",",o.a.createElement("button",{className:"fontarray",onClick:P.changeFont},P.name),",",o.a.createElement("button",{className:"fontarray",onClick:R.changeFont},R.name),",",o.a.createElement("button",{className:"fontarray",onClick:p.changeFont},p.name),",",o.a.createElement("button",{className:"fontarray",onClick:z.changeFont},z.name),",",o.a.createElement("button",{className:"fontarray",onClick:m.changeFont},m.name),",",o.a.createElement("button",{className:"fontarray",onClick:y.changeFont},y.name),",",o.a.createElement("button",{className:"fontarray",onClick:N.changeFont},N.name),",",o.a.createElement("button",{className:"fontarray",onClick:f.changeFont},f.name),",",o.a.createElement("button",{className:"fontarray",onClick:w.changeFont},w.name),",",o.a.createElement("button",{className:"fontarray",onClick:v.changeFont},v.name),",",o.a.createElement("button",{className:"fontarray",onClick:D.changeFont},D.name),",",o.a.createElement("button",{className:"fontarray",onClick:O.changeFont},O.name),",",o.a.createElement("button",{className:"fontarray",onClick:F.changeFont},F.name),",",o.a.createElement("button",{className:"fontarray",onClick:j.changeFont},j.name),",",o.a.createElement("button",{className:"fontarray",onClick:I.changeFont},I.name),",",o.a.createElement("button",{className:"fontarray",onClick:k.changeFont},k.name),",",o.a.createElement("button",{className:"fontarray",onClick:E.changeFont},E.name),",",o.a.createElement("button",{className:"fontarray",onClick:x.changeFont},x.name),",",o.a.createElement("button",{className:"fontarray",onClick:C.changeFont},C.name),",",o.a.createElement("button",{className:"fontarray",onClick:A.changeFont},A.name),",",o.a.createElement("button",{className:"fontarray",onClick:g.changeFont},g.name),",",o.a.createElement("button",{className:"fontarray",onClick:b.changeFont},b.name),",",o.a.createElement("button",{className:"fontarray",onClick:M.changeFont},M.name),",",o.a.createElement("button",{className:"fontarray",onClick:S.changeFont},S.name),o.a.createElement("div",{class:"arraytitle"},"]")),o.a.createElement("div",{id:"descontainer"},o.a.createElement("a",{target:"_blank",href:u.link,id:"link"},u.link),o.a.createElement("div",{id:"lastcol"},o.a.createElement("div",{class:"juseok",id:"leftcor"},"\\*"),o.a.createElement("div",{id:"description"},u.desc),o.a.createElement("div",{class:"juseok",id:"rightcor"},"*/")))))},W=n(10),U=n(6),H=n(5),q=n(3),J=n(4),K=n(70);n(78);function G(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}n(45),n(46),n(104),n(105),n(106),n(107),n(108),n(36);var $="import * as React from 'react'\r\nimport { withRouter } from 'react-router'\r\n\r\nimport * as methods from './methods'\r\nimport { Input } from '#components/Input'\r\nimport { inject, observer } from 'mobx-react'\r\nimport './Splash.css'\r\n\r\nconst selector = (tree) => {\r\n  console.warn({ tree })\r\n  return {\r\n    moduleStore: tree.state.moduleStore\r\n  }\r\n}\r\n\r\n@withRouter\r\n@inject(selector)\r\n@observer\r\nexport class Splash extends React.Component {\r\n  setInputValue = methods.setInputValue(this)\r\n  handleEnterKey = methods.handleEnterKey(this)\r\n  submitRegistration = methods.submitRegistration(this)\r\n  attemptLogin = methods.attemptLogin(this)\r\n  handleLoginEnterKey = methods.handleLoginEnterKey(this)\r\n  state = {\r\n    emailInputValue: locast.lastUserEmail || '',\r\n    passwordInputValue: '',\r\n    usernameInputValue: ''\r\n  }\r\n\r\n  render() {\r\n    const { props, state } = this\r\n    console.log('<Splash>', { props, state })\r\n\r\n    return (\r\n      <div styleName=\"Splash\">\r\n        <h1 className=\"title\">place some copy here</h1>\r\n\r\n        <Input\r\n          big\r\n          value={state.usernameInutValue}\r\n          onChange={this.setInputValue('username')}\r\n          onKeyPress={this.handleEnterKey}\r\n        />\r\n\r\n        <Input\r\n          big\r\n          value={state.emailInputValue}\r\n          onChange={this.setInputValue('email')}\r\n          onKeyPress={this.handleEnterKey}\r\n        />\r\n\r\n        <Input\r\n          big\r\n          value={state.passwordInputValue}\r\n          onChange={this.setInputValue('password')}\r\n          onKeyPress={this.handleEnterKey}\r\n        />\r\n\r\n        {/* TODO: Style buttons and shit... */}\r\n        <button onClick={this.submitRegistration}>submit</button>\r\n\r\n        <h1>LOGIN FORM</h1>\r\n\r\n        <Input\r\n          big\r\n          value={state.usernameInputValue}\r\n          onChange={this.setInputValue('username')}\r\n          onKeyPress={this.handleLoginEnterKey}\r\n        />\r\n\r\n        <Input\r\n          big\r\n          value={state.passwordInputValue}\r\n          onChange={this.setInputValue('password')}\r\n          onKeyPress={this.handleLoginEnterKey}\r\n        />\r\n\r\n        {/* TODO: Style buttons and shit... */}\r\n        <button onClick={this.attemptLogin}>submit</button>\r\n\r\n        <small styleName=\"emailPrompt\">\r\n          Enter your email to create a new module.\r\n        </small>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n",_=".cm-s-custom-0 {\r\n\tbackground: rgb(0, 0, 0);\r\n\tcolor: rgb(173, 170, 204);\r\n  font-weight: 300;\r\n\tline-height: 1.6;\r\n\tfont-family: inherit;\r\n  letter-spacing: 0.425px;\r\n}\r\n\r\n.cm-s-custom-0 .CodeMirror-cursor {\r\n\tborder-color: #fff;\r\n\toutline: 1px solid #fff;\r\n}\r\n\r\n.cm-s-custom-0 .CodeMirror-activeline-background {\r\n\tbackground: rgba(240, 240, 255, 0.8);\r\n}\r\n\r\n.cm-s-custom-0 .CodeMirror-selected {\r\n\tbackground: rgba(100, 100, 100, 0.5);\r\n}\r\n\r\n.cm-s-custom-0 .cm-comment {\r\n\tfont-style: italic;\r\n\tcolor: #676b79;\r\n}\r\n\r\n.cm-s-custom-0 .cm-operator {\r\n\tcolor: #18E12A;\r\n}\r\n\r\n.cm-s-custom-0 .cm-string {\r\n\tcolor: #AF79F4;\r\n}\r\n\r\n.cm-s-custom-0 .cm-string-2 {\r\n\tcolor: #79F4DA;\r\n}\r\n\r\n.cm-s-custom-0 .cm-tag {\r\n\tcolor: #ff2c6d;\r\n}\r\n\r\n.cm-s-custom-0 .cm-meta {\r\n\tcolor: #b084eb;\r\n}\r\n\r\n.cm-s-custom-0 .cm-number {\r\n\tcolor: #ffb86c;\r\n}\r\n\r\n.cm-s-custom-0 .cm-atom {\r\n\tcolor: #ff2c6d;\r\n}\r\n\r\n.cm-s-custom-0 .cm-keyword {\r\n\tcolor: #4980FF;\r\n}\r\n\r\n.cm-s-custom-0 .cm-variable {\r\n\tcolor: #F8FA7D;\r\n}\r\n\r\n.cm-s-custom-0 .cm-variable-2 {\r\n\tcolor: #ff9ac1;\r\n}\r\n\r\n.cm-s-custom-0 .cm-variable-3,\r\n.cm-s-custom-0 .cm-type {\r\n\tcolor: #ff9ac1;\r\n}\r\n\r\n.cm-s-custom-0 .cm-def {\r\n\tcolor: #e6e6e6;\r\n}\r\n\r\n.cm-s-custom-0 .cm-property {\r\n\tcolor: #18E1DB;\r\n}\r\n\r\n.cm-s-custom-0 .cm-unit {\r\n\tcolor: #18E1DB;\r\n}\r\n\r\n.cm-s-custom-0 .cm-attribute {\r\n\tcolor: #f3f3f3;\r\n}\r\n\r\n.cm-s-custom-0 .CodeMirror-matchingbracket {\r\n\tborder-bottom: 0px dotted #19f9d8;\r\n\tpadding-bottom: 2px;\r\n\tcolor: #e6e6e6;\r\n}\r\n\r\n.cm-s-custom-0 .CodeMirror-gutters {\r\n  background: rgb(0, 0, 0);\r\n  border-right-color: rgb(0, 0, 0);\r\n  width: 50px;\r\n  margin-right: 9px;\r\n}\r\n\r\n.cm-s-custom-0 .CodeMirror-linenumber {\r\n  color: rgb(180, 180, 200);\r\n  opacity: 0.75;\r\n  background: rgb(0, 0, 0);\r\n  padding: 0 0px 0 0px;\r\n  font-size: 0.8em;\r\n  border-top: 0px solid transparent;\r\n}\r\n\r\n.cm-s-custom-0 .CodeMirror-lines .CodeMirror-code div {\r\n  padding-left: 2px;\r\n}",Y={theme:"custom-0",autoCloseBrackets:!0,cursorScrollMargin:48,mode:"jsx",lineNumbers:!0,indentUnit:2,tabSize:2,styleActiveLine:!0,viewportMargin:99},Q=function(e){function t(){var e,n;Object(l.a)(this,t);for(var a=arguments.length,o=new Array(a),s=0;s<a;s++)o[s]=arguments[s];return(n=Object(H.a)(this,(e=Object(q.a)(t)).call.apply(e,[this].concat(o)))).state={jsValue:$||n.props.jsValue,cssValue:_||n.props.cssValue},n.jsxOptions=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?G(n,!0).forEach((function(t){Object(W.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):G(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},Y,{},n.props.jsxOptions),n.onChange=function(e){return function(t,a,o){n.setState(Object(W.a)({},"".concat(e,"Value"),o))}},n}return Object(J.a)(t,e),Object(U.a)(t,[{key:"render",value:function(){return a.createElement(a.Fragment,null,a.createElement(X,{name:"js",value:this.state.jsValue,options:this.jsxOptions,onChange:this.onChange("js")}),a.createElement(Z,{css:this.state.cssValue}))}}]),t}(a.Component),X=function(e){function t(){return Object(l.a)(this,t),Object(H.a)(this,Object(q.a)(t).apply(this,arguments))}return Object(J.a)(t,e),Object(U.a)(t,[{key:"render",value:function(){return console.log("rendering -> ".concat(this.props.name)),a.createElement(K.Controlled,{value:this.props.value,options:this.props.options,onBeforeChange:this.props.onChange})}}]),t}(a.PureComponent),Z=function(e){return a.createElement("style",{dangerouslySetInnerHTML:{__html:e.css}})},ee=(n(196),window.$),te=function e(t,n,a,o){var s=this;Object(l.a)(this,e),this.changeDesc=function(){ee("#dicdesc").html(s.desc)},this.name=t,this.desc=o,this.sign=n,this.keyword=a},ne=new te("equals","=","Assign","The meaning of \u2018=\u2018  in programming languages is completely different from the meaning we use in our daily lives. Mathematically, = means \u2018the same\u2019 and we use the sign as it is. But in programming, there is no meaning of \u2018same\u2019 at all. In programming, it is a sign that indicates naming or assign. A=B means \u2018let's say B is now called A\u2019. More specifically, it means \u2018B is now in the bowl called A\u2019. This is one of the strangest things to whom enters programming world. Then you're bound to be curious. Why can't I say B directly and put it in a bowl called A? Why should we call it A indirectly? That's because it's either too long to say B or it costs too much to say. Also, the concept of a bowl is the most important thing in the programming world."),ae=new te("equalsequals","==","What is the same'?","What is \u2018the same\u2019 thing? Am I the same person as I was yesterday? Are the letters on the screen the same as those in the book? Programming has to be very strict about \u2018the same\u2019.  So how do programmers define \u2018the same\u2019? They define \u2018the same\u2019 in two aspects: content and format. Is 123 a number or a letter? Well, It's a difficult question. Is it both a number and a letter? There is no such concept. 123 is recognized as a number in the programming language, and \u2018123\u2019 is recognized as a letter. If you ask, is 123==\u2018123\u2019? They will return true. This is because 123 written in numbers and 123 written in letters have the same content after all."),oe=new te("equalsequalsequals","===","obviously same","Are the number 123 and the character 123 the same? Since the format of \u2018number\u2019 is assigned, 123 acts as a number. If you subtract 1 from 123 you get 122. It can be added, subtracted, multiplied, divided. It acts numerically in all contexts. But can we subtract 1 from the character 123? No. In the character 123 you can erase 3 with an eraser to become 12.  Or you can write other letters after 123 . Like \u2018123 years\u2019.  For another example, is Helvetica written on the web the same as Helvetica printed on the book? Although the content of Helvetica is the same, the grammar of format in which it was written is different. Programmers say things that are all of the same in content and format are 'obviously same\u2019 to each other. The answer to the question, 123==\u2018123\u2019? is false."),se=new te("slash","/","sub-item","What is the meaning of the sign \u2018/ \u2018 in the programming language? Let's take a close look at \u2018/\u2018 and guess. (...) Any guesses? The sign \u2018/\u2018 is used primarily to represent a hierarchy. It is also used as a symbol for division such as a/b and \u2018to close\u2019 something, such as /div, but let\u2019s talk about the hierarchical meaning  which is most commonly used . a/b means that b exists in sub-item a. Even if you're not interested in programming, you've probably seen \u2018/ \u2018 frequently used to represent a directory of files. For example, the sentence {documents/fonts/helvetica} refers to a file named hevetica in the fonts folder in the Documents folder. If you just ask a computer to find Helvetica, the computer won\u2019t find it."),re=new te("slashslash","//","annotation","'//' works in a completely different sense from '/'. '//' is an annotation sign within the programming language. Programmers can not understand the code in one sight which is made of  hundreds of lines at least, to thousands of thousands of lines . So, it is necessary to have a short explanation within the code. However, if the explanation is used recklessly, the entire system can be shut down. It is because the computer also recognizes it as a code. Therefore, there was a need of a sign that says, 'Don't interpret this part' and it is '//'. For example, in the middle of the code a programmer can write  {//this part is\u2026} and describe the code below. Why did '//' become the sign of annotation? Maybe it\u2019s because \u2018//\u2018 has the form of something strong, protected wall."),ie=new te("period",".","Korea.captial=Seoul","What does \u2018.\u2019 mean in programming language? It's a period. So is it used to finish something? In fact, '.' is used to represent the hierarchy, like '/'. If there is one difference, '/' represents the actual path and the hierarchy, however \u2019.\u2019 is used to represent the abstract path. For example, {Korea/Seoul} represents actual approach to Seoul. However, {Korea.capital} represents abstract path. ',' is, as it will be described later, is mainly used to access methods and attribution of class objects. Let's find out slowly because it can be difficult."),ce=new te("periodslash","./","the where you stand","'.' and '/' are combined. This is used to indicate the relative path of files based on the current directory. The location that this sign is used becomes the reference. For example, Let\u2019s say there are \u2018physical file\u2019 and \u2018workshop folders\u2019 in the \u2018documents file\u2019. When you want to access the \u2018workshop folder\u2019 from \u2018physical file,\u2019 you can access it as \u2018./workshop\u2019. If there is a folder called \u2018works\u2019 in the Workshop folder, you can go inside with the command \u2018,/workshop/works\u2019 as introduced earlier."),le=new te("ppslash","../","finding parents","Two \u2018.\u2019 and one \u2018/\u2018 met. This symbol has same contextual with './' and \u2018/\u2018. If the '/' is a symbol that enters a subdirectory and './' represents the current directory, '../' indicates the parent directory. For example, consider working in the \u2018Documents folder\u2019 and want to access to the \u2018reference file\u2019 in the \u2018Documents folder\u2019, you can write it as a \u2018../reference\u2019 to reach the reference file.  '/', ', '/' and '../' are all symbols that represent a direct path."),he=new te("biggualho","[]","storing","Little to be used in everyday life, but various kinds of brackets are used in programming languages. They indicates an act of opening and closing, or an act of storing something. I I think it's probably the most frequently used symbol in programming. Among them, square brackets are used as a function to hold an array. Since it is an array that binds variables with similar characteristics in one place, it is neatly and tightly wrapped to avoid dropping them."),de=new te("middlegualho","{}","storing","\u2018()\u2019 These brackets carry almost everything . If '[]' or \u2018{}\u2019 is used in a slightly more specific location, this symbol contains everything except the two. To tie together the units to be bound in the programming language. `()\u2019 also plays that role, as if a syllable is assembled to create multiple syllables of words. It is usually used to deliver variables."),me=new te("sogualho","{}","storing","If \u2018()\u2019 is specialized in capturing variables, \u2018{}\u2019 is specialized in tying code. All codes must be enclosed within \u2018{}\u2019 In many programming languages, they enclose groups of statements and create a local scope. Such languages (C, C#, C++ and many others) are therefore called curly bracket languages."),ue=new te("byte","byte","byte","byte is a primitive data type similar to int, except it only takes up 8 bits of memory. Thus, why we call it a byte. Because the memory size being so small, byte can only hold the values from -128 (-27) to 127 (27 \u2013 1)."),pe=new te("short","short","short","If we want to save memory and byte is too small, we can use the type halfway between the two: short. At 16 bits of memory, it's half the size of int and twice the size of byte. Its range of possible values is -32,768(-215) to 32,767(215 \u2013 1)."),fe=new te("long","long","long","long is the big brother of int. It's stored in 64 bits of memory so it can hold a significantly larger set of possible values. The possible values of a long are between -9,223,372,036,854,775,808 (-263) to 9,223,372,036,854,775,807 (263 \u2013 1)."),ge=new te("float","float","float","This is a single-precision decimal number. Which means if we get past six decimal points, this number becomes less precise and more of an estimate. In most cases, we don't care about the precision loss. But, if our calculation requires absolute precision (i.e., financial operations, landing on the moon, etc.) we need to use specific types designed for this work. For more information, check out the Java class Big Decimal. This type is stored in 32 bits of memory just like int. However, because of the floating decimal point its range is much different. It can represent both positive and negative numbers. The smallest decimal is 1.40239846 x 10-45, and the largest value is 3.40282347 x 1038."),be=new te("double","double","double"," its name comes from the fact that it's a double-precision decimal number. It's stored in 64 bits of memory. Which means it represents a much larger range of possible numbers than float. Although, it does suffer from the same precision limitation as float does. The range is 4.9406564584124654 x 10-324 to 1.7976931348623157 x 10308. That range can also be positive or negative."),ye=new te("boolean","boolean","boolean","The simplest primitive data type is boolean. It can contain only two values: true or false. It stores its value in a single bit. However, for convenience, Java pads the value and stores it in a single byte. Declaring it without a value defaults to false. boolean is the cornerstone of controlling our programs flow. We can use boolean operators on them."),we=new te("char","char","char","Also called a character, char is a 16-bit integer representing a Unicode-encoded character. Its range is from 0 to 65,535. Which in Unicode represents \u2018\0' to \u2018\uffff'. When defining our variables, we can use any character literal, and they will get automatically transformed into their Unicode encoding for us. A characters default value is \u2018/u0000'."),ve=new te("inheritance","inheritance","inheritance","Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object. It is an important part of OOPs (Object Oriented programming system). The idea behind inheritance in Java is that you can create new classes that are built upon existing classes. When you inherit from an existing class, you can reuse methods and fields of the parent class. Moreover, you can add new methods and fields in your current class also."),ke=new te("object","object","object","An entity that has state and behavior is known as an object e.g., chair, bike, marker, pen, table, car, etc. It can be physical or logical (tangible and intangible). The example of an intangible object is the banking system. An object has three characteristics: State: represents the data (value) of an object. Behavior: represents the behavior (functionality) of an object such as deposit, withdraw, etc. Identity: An object identity is typically implemented via a unique ID. The value of the ID is not visible to the external user. However, it is used internally by the JVM to identify each object uniquely. For Example, Pen is an object. Its name is Reynolds; color is white, known as its state. It is used to write, so writing is its behavior. An object is an instance of a class. A class is a template or blueprint from which objects are created. So, an object is the instance(result) of a class. Object Definitions: An object is a real-world entity. An object is a runtime entity. The object is an entity which has state and behavior.The object is an instance of a class."),Ie=new te("classes","classes","classes","A class is a group of objects which have common properties. It is a template or blueprint from which objects are created. It is a logical entity. It can't be physical. A class in Java can contain: Fields, Methods, Constructors, Blocks, Nested class and interface."),xe=new te("construct","construct","construct","In Java, a constructor is a block of codes similar to the method. It is called when an instance of the class is created. At the time of calling constructor, memory for the object is allocated in the memory. It is a special type of method which is used to initialize the object. Every time an object is created using the new() keyword, at least one constructor is called. It calls a default constructor if there is no constructor available in the class. In such case, Java compiler provides a default constructor by default. There are two types of constructors in Java: no-arg constructor, and parameterized constructor."),Ce=new te("abstractclass","abstractclass","abstractclass","A class which is declared with the abstract keyword is known as an abstract class in Java. It can have abstract and non-abstract methods (method with the body). Before learning the Java abstract class, let's understand the abstraction in Java first. Abstraction is a process of hiding the implementation details and showing only functionality to the user. Another way, it shows only essential things to the user and hides the internal details, for example, sending SMS where you type the text and send the message. You don't know the internal processing about the message delivery. Abstraction lets you focus on what the object does instead of how it does it."),Ee=new te("interfaces","interfaces","interfaces","An interface in java is a blueprint of a class. It has static constants and abstract methods. The interface in Java is a mechanism to achieve abstraction. There can be only abstract methods in the Java interface, not method body. It is used to achieve abstraction and multiple inheritance in Java. In other words, you can say that interfaces can have abstract methods and variables. It cannot have a method body."),Te=new te("override","override","override","If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java. In other words, If a subclass provides the specific implementation of the method that has been declared by one of its parent class, it is known as method overriding."),je=new te("nulls","nulls","nulls",""),Me=new te("publics","publics","publics","If a class member is \u201cpublic\u201d then it can be accessed from anywhere. The member variable or method is accessed globally. This is the simplest way to provide access to class members. However, we should take care of using this keyword with class variables otherwise anybody can change the values. Usually, class variables are kept as private and getter-setter methods are provided to work with them."),Ne=new te("privates","privates","privates","If a class member is \u201cprivate\u201d then it will be accessible only inside the same class. This is the most restricted access and the class member will not be visible to the outer world. Usually, we keep class variables as private and methods that are intended to be used only inside the class as private."),Se=new te("protecteds","protecteds","protecteds","If class member is \u201cprotected\u201d then it will be accessible only to the classes in the same package and to the subclasses. This modifier is less restricted from private but more restricted from public access. Usually, we use this keyword to make sure the class variables are accessible only to the subclasses."),Oe=new te("forss","forss","forss","The Java for loop is a control flow statement that iterates a part of the programs multiple times. for loop provides a concise way of writing the loop structure. Unlike a while loop, a for statement consumes the initialization, condition and increment/decrement in one line thereby providing a shorter, easy to debug structure of looping."),Fe=new te("whiles","whiles","whiles","A while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. The while loop can be thought of as a repeating if statement."),Ae=new te("dowhiles","dowhiles","dowhiles","The Java do while loop is a control flow statement that executes a part of the programs at least once and the further execution depends upon the given boolean condition.  do while loop is similar to while loop with only difference that it checks for condition after executing the statements, and therefore is an example of Exit Control Loop."),De=new te("thiss","thiss","thiss","Keyword THIS is a reference variable in Java that refers to the current object. The various usages of 'THIS' keyword in Java are as follows: It can be used to refer instance variable of current class. It can be used to invoke or initiate current class constructor. It can be passed as an argument in the method call. It can be passed as argument in the constructor call. It can be used to return the current class instance."),Be=new te("capsule","capsule","capsule","Encapsulation is one of the four fundamental OOP concepts. The other three are inheritance, polymorphism, and abstraction. Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit. In encapsulation, the variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class. Therefore, it is also known as data hiding."),Pe=new te("trycatch","trycatch","trycatch","\u2018Try\u2019 and \u2018catch\u2019 are keywords that represent the handling of exceptions due to data or coding errors during program execution. A try block is the block of code in which exceptions occur. A catch block catches and handles try block exceptions. The try/catch statement is used in many programming languages, including C programming language (C++ and C#), Java, JavaScript and Structured Query Language (SQL)."),ze=new te("ififif","ififif","ififif","In programming, it's often desirable to execute a certain section of code based upon whether the specified condition is true or false (which is known only during the run time). For such cases, control flow statements are used."),Le=new te("breaks","breaks","breaks","Suppose you are working with loops. It is sometimes desirable to skip some statements inside the loop or terminate the loop immediately without checking the test expression. In such cases, break and continue statements are used. You will learn about continue statement in the next chapter.The break statement terminates the loop immediately, and the control of the program moves to the next statement following the loop."),Re=new te("continues","continues","continues","Suppose you are working with loops. It is sometimes desirable to skip some statements inside the loop or terminate the loop immediately without checking the test expression. In such cases, break and continue statements are used.  The continue statement skips the current iteration of a loop (for, while, and do...while loop). When continue statement is executed, control of the program jumps to the end of the loop. Then, the test expression that controls the loop is evaluated. In case of for loop, the update statement is executed before the test expression is evaluated."),Ve=new te("arrays","arrays","arrays","An array is a container that holds data (values) of one single type. For example, you can create an array that can hold 100 values of int type. Array is a fundamental construct in Java that allows you to store and access large number of values conveniently."),We=new te("throws","throws","throws","In Java, exceptions can be categorized into two types: Unchecked Exceptions: They are not checked at compile-time but at run-time.For example: ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException, exceptions under Error class, etc. Checked Exceptions: They are checked at compile-time. For example, IOException, InterruptedException, etc. Refer to Java Exceptions to learn in detail about checked and unchecked exceptions. Usually, we don't need to handle unchecked exceptions. It's because unchecked exceptions occur due to programming errors. And, it is a good practice to correct them instead of handling them. This tutorial will now focus on how to handle checked exceptions using throw and throws."),Ue=function(e){var t=e.isDictionaryOpen,n=Object(a.useState)(!0),s=Object(i.a)(n,2),r=(s[0],s[1],Object(c.b)({width:t?window.innerWidth-2*ee("#dictionaryleft").width()+"px":"0px",left:t?"0px":0-.3*window.innerWidth+"px"}));return o.a.createElement(c.a.div,{id:"dictionarymain",style:r},o.a.createElement(c.a.div,{id:"wordcontainer"},o.a.createElement("button",{className:"words kihodesc",onClick:ne.changeDesc},"1.","="),o.a.createElement("button",{className:"words kihodesc",onClick:ae.changeDesc},"2.","=="),o.a.createElement("button",{className:"words kihodesc",onClick:oe.changeDesc},"3.","==="),o.a.createElement("button",{className:"words secondrow",onClick:se.changeDesc},"4.","/"),o.a.createElement("button",{className:"words secondrow",onClick:re.changeDesc},"5.","//"),o.a.createElement("button",{className:"words secondrow",onClick:ie.changeDesc},"6.","."),o.a.createElement("button",{className:"words secondrow",onClick:ce.changeDesc},"7.","./"),o.a.createElement("button",{className:"words secondrow",onClick:le.changeDesc},"8.","../"),o.a.createElement("button",{className:"words kihodesc",onClick:he.changeDesc},"9.","[]"),o.a.createElement("button",{className:"words kihodesc",onClick:de.changeDesc},"10.","()"),o.a.createElement("button",{className:"words kihodesc",onClick:me.changeDesc},"11.","{}"),o.a.createElement("button",{className:"words secondrow",onClick:ue.changeDesc},"12.","byte"),o.a.createElement("button",{className:"words secondrow",onClick:pe.changeDesc},"13.","short"),o.a.createElement("button",{className:"words secondrow",onClick:fe.changeDesc},"14.","long"),o.a.createElement("button",{className:"words secondrow",onClick:ge.changeDesc},"15.","float"),o.a.createElement("button",{className:"words secondrow",onClick:be.changeDesc},"16.","double"),o.a.createElement("button",{className:"words secondrow",onClick:ye.changeDesc},"17.","boolean"),o.a.createElement("button",{className:"words secondrow",onClick:we.changeDesc},"18.","char"),o.a.createElement("button",{className:"words kihodesc",onClick:je.changeDesc},"19.","null"),o.a.createElement("button",{className:"words secondrow",onClick:ke.changeDesc},"20.","object"),o.a.createElement("button",{className:"words secondrow",onClick:Ie.changeDesc},"21.","class"),o.a.createElement("button",{className:"words secondrow",onClick:Ce.changeDesc},"22.","abstractclass"),o.a.createElement("button",{className:"words secondrow",onClick:xe.changeDesc},"23.","constructor"),o.a.createElement("button",{className:"words secondrow",onClick:Ee.changeDesc},"24.","interface"),o.a.createElement("button",{className:"words secondrow",onClick:Be.changeDesc},"25.","Encapsulation"),o.a.createElement("button",{className:"words kihodesc",onClick:De.changeDesc},"26.","this"),o.a.createElement("button",{className:"words secondrow",onClick:ve.changeDesc},"27.","inheritance"),o.a.createElement("button",{className:"words secondrow",onClick:Te.changeDesc},"28.","override"),o.a.createElement("button",{className:"words kihodesc",onClick:Me.changeDesc},"29.","public"),o.a.createElement("button",{className:"words kihodesc",onClick:Ne.changeDesc},"30.","private"),o.a.createElement("button",{className:"words kihodesc",onClick:Se.changeDesc},"31.","protected"),o.a.createElement("button",{className:"words secondrow",onClick:Oe.changeDesc},"32.","for"),o.a.createElement("button",{className:"words secondrow",onClick:Fe.changeDesc},"33.","while"),o.a.createElement("button",{className:"words secondrow",onClick:Ae.changeDesc},"34.","do/while"),o.a.createElement("button",{className:"words kihodesc",onClick:Pe.changeDesc},"35.","try/catch"),o.a.createElement("button",{className:"words kihodesc",onClick:We.changeDesc},"36.","throw"),o.a.createElement("button",{className:"words kihodesc",onClick:ze.changeDesc},"37.","if"),o.a.createElement("button",{className:"words secondrow",onClick:Ve.changeDesc},"38.","array"),o.a.createElement("button",{className:"words secondrow",onClick:Le.changeDesc},"39.","break"),o.a.createElement("button",{className:"words secondrow",onClick:Re.changeDesc},"40.","continue")),o.a.createElement("div",{id:"dicdesc"}))};function He(){1==document.getElementById("readmebutton").style.zIndex?(document.getElementById("readmebutton").style.zIndex=30,document.getElementById("readmepage").style.zIndex=20,document.getElementById("readmeArrow").style.zIndex=30):(document.getElementById("readmebutton").style.zIndex=1,document.getElementById("readmeArrow").style.zIndex=21)}function qe(){1==document.getElementById("dictionaryleft").style.zIndex?(document.getElementById("dictionaryleft").style.zIndex=20,document.getElementById("dictionaryright").style.zIndex=20,document.getElementById("dictionarypage").style.zIndex=19,document.getElementById("wordcontainer").style.zIndex=25):(document.getElementById("dictionaryleft").style.zIndex=1,document.getElementById("dictionaryright").style.zIndex=4,document.getElementById("dictionarypage").style.zIndex=0)}var Je=window.$,Ke=window.innerWidth,Ge=(window.innerHeight,function(){var e=Object(a.useState)(!1),t=Object(i.a)(e,2),n=t[0],s=t[1],r=Object(c.b)({left:n?"80vw":"15vw"}),l=Object(c.b)({width:n?Ke+"px":"0px"}),h=Object(a.useState)(!1),d=Object(i.a)(h,2),m=d[0],u=d[1],p=Object(c.b)({transform:m?"translate3d(0,0,0)":"translate3d(100vw,0,0)"}),f=Object(c.b)({opacity:m?"1":"0"}),g=Object(c.b)({right:m?.5*Ke+"px":"0px"}),b=Object(c.b)({marginLeft:m?.5*Ke+"px":0-.5*Ke+"px"}),y=Object(c.b)({marginLeft:m?"0px":0-3*Ke+"px"}),w=Object(a.useState)(!1),v=Object(i.a)(w,2),k=v[0],I=v[1],x=Object(c.b)({marginLeft:k?"0px":Ke+"px"}),C=Object(c.b)({marginRight:k?Ke+"px":"0px"}),E=Object(a.useState)(!1),T=Object(i.a)(E,2),j=T[0],M=T[1],N=Object(c.b)({left:j?"0px":.6*Ke+"px",width:j?Ke+"px":"0px"}),S=Object(c.b)({left:j?"0px":.3*Ke+"px"}),O=Object(c.b)({left:j?Ke-Je("#dictionaryright").width()+"px":.6*Ke+"px"}),F=(Object(c.b)({opacity:j?"1":"0"}),Object(c.b)({right:k?.25*Ke+"px":0-Ke+"px"}));return o.a.createElement("div",null,o.a.createElement(c.a.button,{class:"nav",id:"fontarraybuttonleft",onClick:function(){s(!n)}},"["),o.a.createElement(c.a.div,{id:"fontarraypage",style:l},o.a.createElement(V,null)),o.a.createElement(c.a.button,{class:"nav",id:"fontarraybuttonright",style:r,onClick:function(){s(!n)}},"]"),o.a.createElement(c.a.div,{id:"readmepage",style:p},o.a.createElement(c.a.div,{id:"leftreadme",style:y},"phase2. I worked on dictionary about the words and symbols used in programming languages. I wrote my own opinion of how the symbol or words became to have that meaning, Not just explaining it like boring books. The grammar used in programming languages is completely different from the grammar we use in our daily lives. The use of symbols or signs is completely different, too. At first, I introduced symbols that anyone can read without any burden, and the more the difficult it  becomes. I can't tell you exactly, but it seems that the mission has been assigned according to the form of those symbols. For example, '//' is used for annotation processing that prevents interpretation of the computer. The shape of '//' reminds me of strong, brick wall that blocks block the interpretation of the computer. Exploring signs and symbols used in programming language may bring a fairly new perspective to those who study design."),o.a.createElement("div",{id:"rightreadme"},"phase1.'Form Follows Function.' Fonts used in programming follows the term. It has a slightly different shape than the ordinary typeface we daily use. It has to be careful and explicit not to confuse programmers. People around the world who uses various writing system use it, so it has to be clear. Not to mention examples like 0 and O, l, 1, and i. So it requires clarity. Small mistakes between , and . Or I and Ie, can shut down whole system. Most of the fonts used in programming are monotype. This is because you need to align the columns to clearly see the structure or hierarchy of the code, and programming software provide service assuming that users use moto-type font. We may think Programmers are indifferent to the font, but they when they choose the typeface, they are very careful just as designers picking up fonts in Indesign. Most of designers do not have the opportunity to see a font for programming purposes. However, I think fonts for programming are very well \u2018designed\u2019. Font with form for special function. Reason why this website\u2019s title is font follows function(){}. On the one hand, when searching for programming fonts, they often fail to select and select by only the words in the already written sentence. So I archived various programming fonts on this site, and filled all the elements of the homepage with only letters. And I\u2019ve got a place where we can actually write code using the font. Whenever a font changes, the height of the font and the layout of this page change dynamically depending on the lettering space or height of the font. I wanted this homepage to be a type specimen.")),o.a.createElement(c.a.div,{id:"butfont",style:f}),o.a.createElement(c.a.button,{id:"readmeArrow",style:b,onClick:function(){u(!m),He()}},"--\x3e"),o.a.createElement(c.a.button,{class:"nav",id:"dictionaryleft",style:S,onClick:function(){M(!j),qe()}},"("),o.a.createElement(c.a.div,{id:"marquee",style:F},"Type some code here!"),o.a.createElement(c.a.div,{id:"dictionarypage",style:N},o.a.createElement(Ue,{isDictionaryOpen:j})),o.a.createElement(c.a.button,{class:"nav",id:"dictionaryright",style:O,onClick:function(){M(!j),qe()}},")"),o.a.createElement(c.a.button,{class:"nav",id:"readmebutton",style:g,onClick:function(){u(!m),He()}},"\x3c!--"),o.a.createElement(c.a.button,{class:"nav",id:"typefontbutton",style:C,onClick:function(){I(!k)}},"{"),o.a.createElement(c.a.div,{id:"typepage",style:x},o.a.createElement(Q,null),o.a.createElement(c.a.button,{id:"closetypepage",onClick:function(){I(!k)}},"}"),o.a.createElement("div",{id:"typewhitebackground"})),o.a.createElement("div",{id:"footer"},o.a.createElement("div",{id:"leftfooter"},"main"),o.a.createElement("div",{id:"rightfooter"},"body.fontfamily=cousine")),o.a.createElement(c.a.div,{id:"footerbackground",style:x}))});Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(o.a.createElement(Ge,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))},36:function(e,t,n){},72:function(e,t,n){e.exports=n(195)},77:function(e,t,n){}},[[72,1,2]]]);
//# sourceMappingURL=main.7942bfe5.chunk.js.map